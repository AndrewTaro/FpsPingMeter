(def constant TT_FPSPINGMETER_INSTALLED true) #for modconfig

(def constant FPM_FONT_SIZE
	[
		13,	# Default
		15,	# Large
		17,	# Gigantic
	]
)

(def constant FPM_FONT_STYLE_MESSAGE
	[
		'$FPM_MessageDefaultStyle',	# Default/Dark
		'$FPM_MessageLightStyle',	# Light
	]
)

(def constant FPM_FONT_STYLE_VALUE
	[
		'$FPM_ValueDefalutStyle',	# Default/Dark
		'$FPM_ValueLightStyle',		# Light
	]
)

(def constant FPM_PREFS {
	FONT_SIZE:			 {KEY: 'fpsPingMeterFontSize',			DEFAULT: 0,		MODIFIER: 1,	OFFSET: 0},
	FONT_STYLE:			 {KEY: 'fpsPingMeterFontStyle',			DEFAULT: 0,		MODIFIER: 1,	OFFSET: 0},
	FPS_WARN_THRESHOLD:	 {KEY: 'fpsPingMeterFpsWarnThreshold',	DEFAULT: 55,	MODIFIER: 5,	OFFSET: 30},
	FPS_CRIT_THRESHOLD:	 {KEY: 'fpsPingMeterFpsCritThreshold',	DEFAULT: 30,	MODIFIER: 5,	OFFSET: 30},
	PING_WARN_THRESHOLD: {KEY: 'fpsPingMeterPingWarnThreshold', DEFAULT: 100,	MODIFIER: 10,	OFFSET: 50},
	PING_CRIT_THRESHOLD: {KEY: 'fpsPingMeterPingCritThreshold',	DEFAULT: 150,	MODIFIER: 10,	OFFSET: 50},
})

(def constant FPM_FONT_COLOR {
	CRITICAL		: 0xff4b1d,
	WARNING			: 0xffb600,
	THEME_DEFAULT	: 0xe5161616,
	THEME_LIGHT		: 0xFFFFFF,
})

(def css $FPM_MessageDefaultStyle()
	(extends $FontFamilyDefault)
	(extends $FontFpsDropShadowWhite)
	(extends $FontColorFPS)
	(extends $TextMouseDisable)
)

(def css $FPM_ValueDefalutStyle()
	(extends $FontFamilyDefaultBold)
	(extends $FontFpsDropShadowWhite)
	(extends $FontColorFPS)
	(extends $TextMouseDisable)
)

(def css $FPM_MessageLightStyle()
	(extends $FPM_MessageDefaultStyle)
	(extends $FontColorWhite)
	(extends $FontDropShadowFilter)
)

(def css $FPM_ValueLightStyle()
	(extends $FPM_ValueDefalutStyle)
	(extends $FontColorWhite)
	(extends $FontDropShadowFilter)
)

(def macro FPM_GET_USERPREF()
	(var userPrefsComponent:gfx = "$datahub.getSingleComponent(CC.userPrefs)")
	(var userPrefsNum:gfx = "userPrefsComponent.userPrefs.chatBoxWidth" watch=false (event "userPrefsComponent.evUserPrefsChanged"))
)

(def macro FPM_GET_PREF_NUMBER (_varName:expression, _pref:expression)
	(var name="_varName" type=number value="userPrefsNum && isNumber(userPrefsNum[_pref.KEY]) ? _pref.OFFSET + (round(userPrefsNum[_pref.KEY]) * _pref.MODIFIER) : _pref.DEFAULT")
)

(def macro FPM_GET_PREF_BOOL (_varName:expression, _pref:expression)
	(var name="_varName" type=bool value="userPrefsNum && isNumber(userPrefsNum[_pref.KEY]) ? round(userPrefsNum[_pref.KEY]) : _pref.DEFAULT")
)


(def element FpsDisplay(fps:number) layout=true
	# mod
	(scope
		(macro FPM_GET_USERPREF)
		(macro FPM_GET_PREF_NUMBER _varName="'fontStylePrefIndex'"	_pref="FPM_PREFS.FONT_STYLE")
		(macro FPM_GET_PREF_NUMBER _varName="'fontSizePrefIndex'"	_pref="FPM_PREFS.FONT_SIZE")
		(macro FPM_GET_PREF_NUMBER _varName="'fpsWarnThreshold'"	_pref="FPM_PREFS.FPS_WARN_THRESHOLD")
		(macro FPM_GET_PREF_NUMBER _varName="'fpsCritThreshold'"	_pref="FPM_PREFS.FPS_CRIT_THRESHOLD")

		(var fontStyleIndex:number = "fontStylePrefIndex < FPM_FONT_STYLE_MESSAGE.length ? fontStylePrefIndex : 0")
		(var fontSizeIndex:number = "fontSizePrefIndex < FPM_FONT_SIZE.length ? fontSizePrefIndex : 0")

		(var messageFontStyle:str = "FPM_FONT_STYLE_MESSAGE[fontStyleIndex]")
		(var valueFontStyle:str = "FPM_FONT_STYLE_VALUE[fontStyleIndex]")
		(var fontSize:number = "FPM_FONT_SIZE[fontSizeIndex]")

		(var warningColor:number = "fps < fpsCritThreshold	? FPM_FONT_COLOR.CRITICAL :
									fps < fpsWarnThreshold	? FPM_FONT_COLOR.WARNING :
									fontStyleIndex == 0   	? FPM_FONT_COLOR.THEME_DEFAULT
															: FPM_FONT_COLOR.THEME_LIGHT
		"
		)
	)
	#

	(style
		(flow = "horizontal")
	)

	(tf
		# mod
		(bind class "valueFontStyle")
		#
		(bind text "fps")
		(style
			(bind minWidth "floor(fps/10) ? 18 : 12")
			(bind fontSize "fontSize")
			(bind textColor "warningColor")
			(filters 
				(dropShadow 
					(distance = 0)
					(angle = 90)
					(bind color "fps < fpsWarnThreshold ? 0x000000 : 0xFFFFFF")
					(alpha = 1.0)
					(blurX = 2.0)
					(blurY = 2.0)
					(strength = 0.6)
					(quality = 2)
				)
			)
		)
	)
	(tf
		# mod
		(bind class "messageFontStyle")
		(style
			(bind fontSize "fontSize")
		)
		#
		(text = 'FPS')
	)
)

(def element PingDisplay(ping:number) layout=true
	# mod
	(scope
		(macro FPM_GET_USERPREF)
		(macro FPM_GET_PREF_NUMBER _varName="'fontStylePrefIndex'"	_pref="FPM_PREFS.FONT_STYLE")
		(macro FPM_GET_PREF_NUMBER _varName="'fontSizePrefIndex'"	_pref="FPM_PREFS.FONT_SIZE")
		(macro FPM_GET_PREF_NUMBER _varName="'pingWarnThreshold'"	_pref="FPM_PREFS.PING_WARN_THRESHOLD")
		(macro FPM_GET_PREF_NUMBER _varName="'pingCritThreshold'"	_pref="FPM_PREFS.PING_CRIT_THRESHOLD")

		(var fontStyleIndex:number = "fontStylePrefIndex < FPM_FONT_STYLE_MESSAGE.length ? fontStylePrefIndex : 0")
		(var fontSizeIndex:number = "fontSizePrefIndex < FPM_FONT_SIZE.length ? fontSizePrefIndex : 0")

		(var messageFontStyle:str = "FPM_FONT_STYLE_MESSAGE[fontStyleIndex]")
		(var valueFontStyle:str = "FPM_FONT_STYLE_VALUE[fontStyleIndex]")
		(var fontSize:number = "FPM_FONT_SIZE[fontSizeIndex]")
		(var warningColor:number = "ping > pingCritThreshold	? FPM_FONT_COLOR.CRITICAL :
									ping > pingWarnThreshold	? FPM_FONT_COLOR.WARNING :
									fontStyleIndex == 0 		? FPM_FONT_COLOR.THEME_DEFAULT
																: FPM_FONT_COLOR.THEME_LIGHT
		"
		)
	)
	#
	(bind visible "ping > 0")
	(style
		(flow = "horizontal")
	)

	(tf
		# mod
		(bind class "messageFontStyle")
		(style
			(bind fontSize "fontSize")
		)
		#
		(text = 'ping')
	)
	(tf
		# mod
		(bind class "valueFontStyle")
		#
		(style
			(bind minWidth "floor(ping/100) ? 24 : 18")
			(bind textColor "warningColor")
			(bind fontSize "fontSize")
			(filters 
				(dropShadow 
					(distance = 0)
					(angle = 90)
					(bind color "ping > pingWarnThreshold ? 0x000000 : 0xFFFFFF")
					(alpha = 1.0)
					(blurX = 2.0)
					(blurY = 2.0)
					(strength = 0.6)
					(quality = 2)
				)
			)
		)
		(bind text "ping")
	)
	(tf
		# mod
		(bind class "messageFontStyle")
		(style
			(bind fontSize "fontSize")
		)
		#
		(text = 'ms')
	)
)